#pragma GCC diagnostic ignored "-Wunused-parameter"
#include "util.h"
#include "common.h"
#include "lapic_timer.h"

#define N_TASKS 3
#define STACK_SIZE 0x2000 // 8 KB

static void task0() {
	while (1) {
		puts("hello from task0\r\n");
		volatile int i = 100000000;
		while (i--);
	}
}
static void task1() {
	while (1) {
		puts("hello from task1\r\n");
		volatile int i = 100000000;
		while (i--);
	}
}
static void task2() {
	while (1) {
		puts("hello from task2\r\n");
		volatile int i = 100000000;
		while (i--);
	}
}

u64 get_entrypoint(int task_id) {
	u64 res;
	if (task_id == 0) res = (u64) task0;
	else if (task_id == 1) res = (u64) task1;
	else if (task_id == 2) res = (u64) task2;
	else puts("get_entrypoint: unknown task id");
	return res;
}

typedef struct {
	u64 sp; // rsp at which all general regsisters have been just pushed
} task_t;


#define SET_SP(sp) asm volatile ("mov %0, %%rsp" :: "r"(sp))

static char stacks[N_TASKS][STACK_SIZE];
static task_t tasks[N_TASKS];
static u32 cur_task;

#define GET_REGISTER(var, reg) \
	asm volatile ("mov " reg ", %0": "=r"(var));

// prepare initial stack
static void prepare_stack(int id, u64 rip) {
	u64 initial_sp = tasks[id].sp;
	
	// push SS
	tasks[id].sp -= 8;
	GET_REGISTER(*(u16 *) tasks[id].sp, "%%ss");
	// push RSP
	tasks[id].sp -= 8;
	*(u64 *) tasks[id].sp = initial_sp;
	// push RFLAGS
	unsigned long long sp_bak;
	u64 tmp_sp = tasks[id].sp;
	asm volatile (
		"mov %%rsp, %0\n"
		"mov %1, %%rsp\n"
		"pushfq\n" : "=r"(sp_bak) : "m"(tmp_sp)
	);
	asm volatile ("mov %0, %%rsp" :: "m"(sp_bak)); // restore sp
	tasks[id].sp -= 8;
	// push CS
	tasks[id].sp -= 8;
	GET_REGISTER(*(u16 *) tasks[id].sp, "%%cs");
	// push RIP
	tasks[id].sp -= 8;
	*(u64 *) tasks[id].sp = rip;
	
	// push RAX-RDX, RDI, RSI, RBP
	tasks[id].sp -= 8 * 7;
}
void init_tasks() {
	for (int i = 0; i < N_TASKS; i++) {
		tasks[i].sp = (u64) (stacks[i] + STACK_SIZE);
		if (i != 0) prepare_stack(i, get_entrypoint(i));
	}
	cur_task = 0;
}

void start_task0() {
	cur_task = 0;
	SET_SP(tasks[cur_task].sp);
	task0();
}

unsigned long long schedule(unsigned long long sp) {
	tasks[cur_task].sp = sp;
	int next_task = (cur_task + 1) % N_TASKS;
	cur_task = next_task;
	return tasks[next_task].sp;
}
